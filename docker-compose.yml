services:
  nginx:
    image: nginx:1.23
    build: ./services/nginx
    container_name: api-gateway
    platform: linux/x86_64
    ports:
      - "8443:443"
      - "8000:80"
    volumes:
      - ./services/nginx/www:/usr/share/nginx/html  
      - ./services/nginx/conf/jwt_validation.lua:/etc/nginx/lua/jwt_validation.lua              
      - ./services/nginx/conf/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - shared_volumen:/media/
    depends_on:
      - auth
      - websocket
    env_file:
      - .env

    networks:
      - app-network


  message-broker:
    image: rabbitmq:4-management-alpine
    container_name: message-broker
    platform: linux/x86_64
    ports:
        - 5672:5672
        - 15672:15672
    environment:
      - RABBITMQ_LOGS=-error
    networks:
      - app-network
    restart: always

  auth:
    build:
      context: ./services/auth
    container_name: auth
    ports:
      - "8011:8001"
      - "1025:1025"
    volumes:
      - ./services/auth:/app
      - shared_volumen:/media/ 
    env_file:
      - .env
    networks:
      - app-network  

  auth_db:
    image: postgres:17.4-alpine3.21
    container_name: auth_db
    environment:
      POSTGRES_DB: auth_db
    env_file:
      - .env
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  websocket:
    build:
      context: ./services/websocket  
    container_name: websocket
    volumes:
      - ./services/websocket:/app  
    ports:
      - "8012:8002"  
    environment:
      - REDIS_HOST=redis
    env_file:
      - .env
    depends_on:
      - redis
    networks:
      - app-network

  tournaments:
    build:
      context: ./services/tournaments
    container_name: tournaments
    volumes:
      - ./services/tournaments:/app
    ports:
      - "8013:8003"
    command: [/bin/sh, drf_entrypoint.sh]
    env_file:
      - .env
    networks:
      - app-network

  tournaments_db:
    image: postgres:17.4-alpine3.21
    container_name: tournaments_db
    environment:
      POSTGRES_DB: tournaments_db
    env_file:
      - .env
    volumes:
      - tournaments_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  tournaments_celery:
    build:
      context: ./services/tournaments
    container_name: tournaments_celery
    depends_on:
      - tournaments
      - message-broker
    volumes:
      - ./services/tournaments:/app
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@message-broker:5672//
    env_file:
      - .env
    command: [/bin/sh, celery_entrypoint.sh]
    user: "1001:1001" 
    networks:
      - app-network


  redis:
    image: redis:alpine
    container_name: redis
    networks:
      - app-network

  game_drf:
    build:
      context: ./services/game
    container_name: game_drf
    volumes:
      - ./services/game:/app
    env_file:
      - .env
    command: [/bin/sh, drf_entrypoint.sh]
    ports:
      - "8014:8004"
    networks:
      - app-network

  game_daphne:
    build:
      context: ./services/game
    container_name: game_daphne
    volumes:
      - ./services/game:/app  
    ports:
      - "8015:8005"  # Exponer el puerto para WebSocket
    environment:
      - REDIS_HOST=redis
    depends_on:
      - redis
    env_file :
    - .env
    command: [/bin/sh, daphne_entrypoint.sh]
    networks:
      - app-network

  game_celery:
    build:
        context: ./services/game
    container_name: game_celery
    volumes:
      - ./services/game:/app
    env_file :
      - .env  
    networks :
      - app-network
    restart: always
    command: [/bin/sh, celery_entrypoint.sh]
    user: "1001:1001"  # Run as non-root user for security

  game_asyncio:
    build:
        context: ./services/game
    container_name: game_asyncio
    volumes:
      - ./services/game:/app
    env_file :
      - .env
    networks :
      - app-network
    restart: always
    command: [/bin/sh, asyncio_entrypoint.sh]

  game_db:
    image: postgres:17.4-alpine3.21
    container_name: game_db
    environment:
      POSTGRES_DB: game_db
    env_file:
      - .env
    volumes:
      - game_db_data:/var/lib/postgresql/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  shared_volumen:
  auth_db_data:
  game_db_data:
  tournaments_db_data:
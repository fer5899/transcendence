services:
  nginx:
    image: nginx:1.23  # Specify the version for stability
    build: ./services/nginx
    container_name: api-gateway
    platform: linux/x86_64
    ports:
      - "8443:443"  # Expose port 80 to access the API Gateway from outside
      - "8000:80"  # Expose port 80 to access the API Gateway from outside
    volumes:
      - ./services/nginx/www:/usr/share/nginx/html  
      - ./services/nginx/conf/jwt_validation.lua:/etc/nginx/lua/jwt_validation.lua              
      - ./services/nginx/conf/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf
      - shared_volumen:/media/ #CAUTIOOOOOOOOOOOOOOOOOON EN EL FUTURO, LOS ARCHIVOS DEL VOLUMENDOCKER SOBREESCRIBIRAR LO QUE SE COPIE EN TU DIRECTORIO, ES DECIR PREVALECE EL CONTENIDO DEL VOLUMENT FRENTE A TODA ACCION.
    depends_on:
      - auth
      - websocket
    env_file:
      - .env

    networks:
      - app-network  # Shared network for internal communication


  message-broker:
    image: rabbitmq:4-management-alpine
    container_name: message-broker
    platform: linux/x86_64
    ports:
        - 5672:5672
        - 15672:15672
    environment:
      - RABBITMQ_LOGS=-error
    networks:
      - app-network
    restart: always

  auth:
    build:
      context: ./services/auth  # Directory for auth Dockerfile and code
    container_name: auth
    ports:
      - "8011:8001"  # Expose port 8001 to access the Auth service from outside
      - "1025:1025"
    volumes:
      - ./services/auth:/app  # Bind mount for code synchronization
      - shared_volumen:/media/ 
    env_file:
      - .env
    networks:
      - app-network  # Internal network only

  auth_db:
    image: postgres:17.4-alpine3.21
    container_name: auth_db
    environment:
      POSTGRES_DB: auth_db
    env_file:
      - .env
    volumes:
      - auth_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  websocket:
    build:
      context: ./services/websocket  # Ruta del microservicio de WebSocket
    container_name: websocket
    volumes:
      - ./services/websocket:/app  
    ports:
      - "8012:8002"  # Exponer el puerto para WebSocket
    environment:
      - REDIS_HOST=redis  # Usaremos Redis para gestionar las conexiones de WebSocket
    depends_on:
      - redis
    networks:
      - app-network

  tournaments:
    build:
      context: ./services/tournaments
    container_name: tournaments
    volumes:
      - ./services/tournaments:/app
    ports:
      - "8013:8003"  #Admin console
    networks:
      - app-network

  tournaments_db:
    image: postgres:17.4-alpine3.21
    container_name: tournaments_db
    environment:
      POSTGRES_DB: tournaments_db
    env_file:
      - .env
    volumes:
      - tournaments_db_data:/var/lib/postgresql/data
    networks:
      - app-network

  tournaments_celery:
    build:
      context: ./services/tournaments
    container_name: tournaments_celery
    depends_on:
      - tournaments
      - message-broker
    volumes:
      - ./services/tournaments:/app
    environment:
      - CELERY_BROKER_URL=amqp://guest:guest@message-broker:5672//
    command: [/bin/sh, celery_entrypoint.sh]
    networks:
      - app-network


  redis:
    image: redis:alpine
    container_name: redis
    # ports:
    #   - "6379:6379"  # Expose Redis port to manage WebSocket connections
    networks:
      - app-network

  game_drf:
    build:
      context: ./services/game  #Directory for game Dockerfile and code
    container_name: game_drf
    volumes:
      - ./services/game:/app  #Bind mount for code synchronization
    env_file:
      - .env
    command: [/bin/sh, drf_entrypoint.sh]
    ports:
      - "8014:8004"  # Expose port to access the Game service admin console
    networks:
      - app-network

  game_daphne:
    build:
      context: ./services/game  # Ruta del microservicio de Game daphne
    container_name: game_daphne
    volumes:
      - ./services/game:/app  
    ports:
      - "8015:8005"  # Exponer el puerto para WebSocket
    environment:
      - REDIS_HOST=redis  # Usaremos Redis para gestionar las conexiones de WebSocket
    depends_on:
      - redis
    command: [/bin/sh, daphne_entrypoint.sh]
    networks:
      - app-network

  game_celery:
    build:
        context: ./services/game
    container_name: game_celery
    volumes:
      - ./services/game:/app
    env_file :
      - .env
    networks :
      - app-network
    restart: always
    command: [/bin/sh, celery_entrypoint.sh]

  game_asyncio:
    build:
        context: ./services/game
    container_name: game_asyncio
    volumes:
      - ./services/game:/app
    env_file :
      - .env
    networks :
      - app-network
    restart: always
    command: [/bin/sh, asyncio_entrypoint.sh]

  game_db:
    image: postgres:17.4-alpine3.21
    container_name: game_db
    environment:
      POSTGRES_DB: game_db
    env_file:
      - .env
    volumes:
      - game_db_data:/var/lib/postgresql/data
    networks:
      - app-network



  # tournament:
  #   build:
  #     context: ./services/tournament  # Directory for tournament Dockerfile and code
  #   container_name: tournament
  #   volumes:
  #     - ./services/tournament:/app  # Bind mount for code synchronization
  #   networks:
  #     - app-network

  # stats:
  #   build:
  #     context: ./services/stats  # Directory for stats Dockerfile and code
  #   container_name: stats
  #   volumes:
  #     - ./services/stats:/app  # Bind mount for code synchronization
  #   networks:
  #     - app-network

# Define the Docker network to allow communication between services
networks:
  app-network:
    driver: bridge

volumes:
  shared_volumen:
  auth_db_data:
  game_db_data:
  tournaments_db_data: